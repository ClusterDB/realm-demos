name: Build

# TODO: See if we can speed up the xcodebuild command

# TODO: See if we can cache realm cli as it takes 2 minutes to install

# Will need to expand this to other branches
on: [push, pull_request]

jobs:    
  build:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
#     Setting env vars based on https://docs.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-environment-variable      
    - name: "Get current time to use later"
      run: echo "CURRENT_TIME=$(date +'%Y-%m-%d_%s')" >> $GITHUB_ENV
    - name: "Are we pushing to the Main branch?"
      if: ${{ github.ref == 'refs/heads/main' }}
      run: | 
           echo "REALM_APP_ID=inventorysync-ctnnu" >> $GITHUB_ENV
    - name: "Are we pushing to the Staging branch?"
      if: ${{ github.ref == 'refs/heads/staging' }}
      run: | 
           echo "REALM_APP_ID=inventorydemo-staging-zahjj" >> $GITHUB_ENV
# For Pull Requests, update the database name to be a unique name based on the current date and time
# Also, set the environment to be the Testing envrionment
    - name: "Set environment variables for all other runs"
      if: ${{ !env.REALM_APP_ID }}
      run: | 
           cd inventory/export/sync/environments
           printf '{\n     "values": {"databaseName": "InventoryDemo-%s"}\n}' "${{ env.CURRENT_TIME }}" > testing.json     
           cd ..
           sed -i txt 's/{/{ "environment": "testing",/' realm_config.json 
           echo "IS_DYNAMICALLY_GENERATED_APP=true" >> $GITHUB_ENV
    - name: "Install the Realm CLI"
      run: npm install -g mongodb-realm-cli@beta
# Adding --realm-url and --atlas-url to login command to workaround authentication error           
    - name: "Authenticate to the Realm CLI (using generic API key)"
      if: ${{ env.REALM_APP_ID }}
      run: realm-cli login --api-key="${{ secrets.REALM_API_PUBLIC_KEY }}" --private-api-key="${{ secrets.REALM_API_PRIVATE_KEY }}" --realm-url https://realm.mongodb.com --atlas-url https://cloud.mongodb.com
# Making these separate steps since specifying the project id isn't working so we need to use separate API keys
# Need to think through splitting this for Dev pushes
    - name: "Authenticate to the Realm CLI (using API key for Testing Project)"
      if: ${{ env.IS_DYNAMICALLY_GENERATED_APP }}
      run: realm-cli login --api-key="${{ secrets.REALM_API_TESTING_PROJECT_PUBLIC_KEY }}" --private-api-key="${{ secrets.REALM_API_TESTING_PROJECT_PRIVATE_KEY }}" --realm-url https://realm.mongodb.com --atlas-url https://cloud.mongodb.com
    - name: "Push updated copy of the Realm app (Staging or Main branch)"
      if: ${{ env.REALM_APP_ID }}
      run: | 
           cd inventory/export/sync
           realm-cli push --remote="${{ env.REALM_APP_ID }}" -y
    - name: "Create a new Realm app for pull requests"
      if: ${{ env.IS_DYNAMICALLY_GENERATED_APP }}
      run: |
           cd inventory/export/sync
           realm-cli push -y
           output=$(realm-cli app describe)
           app_id=$(echo $output | sed 's/^.*client_app_id": "\([^"]*\).*/\1/')
           echo "REALM_APP_ID=$app_id" >> $GITHUB_ENV
    - name: "Build mobile app & run tests"
      run: |
           echo "the realm app id is: $REALM_APP_ID"
           cd inventory/clients/ios-swiftui/InventoryDemo
           xcodebuild -project InventoryDemo.xcodeproj -scheme "ci" -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 12 Pro Max,OS=14.4' -derivedDataPath './output' REALM_APP_ID='${{ env.REALM_APP_ID }}' test
# This step taken from https://docs.github.com/en/actions/guides/installing-an-apple-certificate-on-macos-runners-for-xcode-development       
    - name: "Install the Apple certificate and provisioning profile (so we can create the archive)"
      if: ${{ github.ref == 'refs/heads/main' }}
      env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

          # create temporary keychain
          security create-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P $P12_PASSWORD -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
    - name: "Archive the mobile app"
      if: ${{ github.ref == 'refs/heads/main' }}
      run: |
           cd inventory/clients/ios-swiftui/InventoryDemo
           echo ${{ env.REALM_APP_ID }}
           xcodebuild -workspace InventoryDemo.xcodeproj/project.xcworkspace/ -scheme ci archive REALM_APP_ID=${{ env.REALM_APP_ID }} -archivePath $PWD/build/ci.xcarchive -allowProvisioningUpdates
           xcodebuild -exportArchive -archivePath $PWD/build/ci.xcarchive -exportPath $PWD/build -exportOptionsPlist $PWD/build/ci.xcarchive/Info.plist
# This step stores the archive in a GitHub release.
# Alternatively, you could upload the app directly for beta testing and/or release
    - name: "Store the Archive in a GitHub Release"
      uses: softprops/action-gh-release@v1
      if: ${{ github.ref == 'refs/heads/main' }}
      with:
          files: |
            inventory/clients/ios-swiftui/InventoryDemo/build/InventoryDemo.ipa
          tag_name: ${{ env.CURRENT_TIME }}
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
           

# Could choose to skip deleting apps where tests fail so you could manually investigate
# Not currently working due to a bug in the realm-cli. Also need to delete mobile database
#     - name: "Delete dynamically generated Realm app"
#       if: ${{ env.IS_DYNAMICALLY_GENERATED_APP }}
#       run: realm-cli app delete -a $REALM_APP_ID

# After the tests pass, push commits from the staging branch to the main branch
  pushToProdBranch:
    runs-on: macos-latest
    needs: build
    if: ${{ github.ref == 'refs/heads/staging' }}
    steps:
    - uses: actions/checkout@v2
      with:
        ref: main
        fetch-depth: 0
        token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
    - name: "Push to the Main branch"
      run: |
           git merge origin/staging
           git push
    
